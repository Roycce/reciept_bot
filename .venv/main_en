import os
import logging
import json
import asyncio
import uuid
from datetime import datetime
from typing import Dict
from aiogram import Bot, Dispatcher, types, exceptions
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardMarkup,
)
from dotenv import load_dotenv
from gspread_asyncio import AsyncioGspreadClientManager
from oauth2client.service_account import ServiceAccountCredentials


# Logging setup
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
)
logger = logging.getLogger(__name__)

# Load environment variables
load_dotenv()
API_TOKEN = os.getenv("BOT_API_TOKEN")
ADMIN_IDS = list(map(int, os.getenv("ADMIN_IDS", "").split(","))) if os.getenv("ADMIN_IDS") else []

# Constants
DATA_FILE = "users.json"
SHEET_URL = os.getenv("SHEET_URL")
WORKSHEET_NAME = os.getenv("WORKSHEET_NAME")

# Initialize bot and dispatcher
bot = Bot(token=API_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# Temporary storage and lock
temp_storage: Dict[str, dict] = {}
temp_storage_lock = asyncio.Lock()


class CheckForm(StatesGroup):
    username = State()
    date = State()
    cash = State()
    noncash = State()
    fullname = State()


class GoogleSheetsManager:
    def __init__(self):
        self.client_manager = AsyncioGspreadClientManager(
            lambda: ServiceAccountCredentials.from_json_keyfile_name(
                "credentials.json",
                [
                    "https://www.googleapis.com/auth/spreadsheets",
                    "https://www.googleapis.com/auth/drive",
                ],
            )
        )

    async def append_data(self, data: dict, status: str) -> bool:
        try:
            client = await self.client_manager.authorize()
            spreadsheet = await client.open_by_url(SHEET_URL)
            worksheet = await spreadsheet.worksheet(WORKSHEET_NAME)

            # Получаем заметку из данных пользователя
            users = load_users()
            user_note = users.get(data["username"], {}).get("note", "")

            # Формируем строку с заметкой в последнем столбце
            row = [
                data["check_id"],
                data["username"],
                data["date"],
                data["cash"],
                data["noncash"],
                data["fullname"],
                status,
                user_note  # Добавляем заметку в последний столбец
            ]

            await worksheet.append_row(row)
            return True
        except Exception as e:
            logger.error(f"Google Sheets Error: {str(e)}", exc_info=True)
            return False


gsheets = GoogleSheetsManager()


def load_users() -> dict:
    try:
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return {}


def save_users(users: dict):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(users, f, indent=4, ensure_ascii=False)


def get_user_id(username: str) -> int | None:
    users = load_users()
    user_data = users.get(username.lower())
    return user_data["user_id"] if user_data else None


def get_cancel_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="❌ Cancel")]],
        resize_keyboard=True,
    )


def get_date_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="📅 Today"), KeyboardButton(text="📝 Enter date")],
            [KeyboardButton(text="❌ Cancel")]
        ],
        resize_keyboard=True,
    )


@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    users = load_users()
    username = message.from_user.username or f"ID_{message.from_user.id}"
    user_id = message.from_user.id

    if username:
        # If the user already exists, update their data
        if username.lower() in users:
            users[username.lower()]["user_id"] = user_id
        else:
            # If the user is new, add them with an empty note
            users[username.lower()] = {"user_id": user_id, "note": ""}
        save_users(users)

    if user_id not in ADMIN_IDS:
        for admin_id in ADMIN_IDS:
            try:
                await bot.send_message(
                    admin_id,
                    f"👤 New user: @{username if username != f'ID_{message.from_user.id}' else 'Not specified'} (ID: {user_id})"
                )
            except Exception as e:
                logger.error(f"Admin notification error: {e}")

    await message.answer(
        "🌟 Welcome to the receipt management bot!\n"
        "Use /check to create a new receipt.",
        reply_markup=get_cancel_keyboard(),
    )


@dp.message(Command("add_user"))
async def cmd_add_user(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return await message.answer("🚫 This command is only available to administrators.")

    args = message.text.split(maxsplit=3)
    if len(args) < 3:
        return await message.answer("❌ Usage: /add_user <username> <user_id> [note]")

    username, user_id = args[1].lower(), args[2]
    note = args[3] if len(args) > 3 else ""

    if not user_id.isdigit():
        return await message.answer("❌ user_id must be a number!")

    users = load_users()
    users[username] = {"user_id": int(user_id), "note": note}

    save_users(users)

    await message.answer(f"✅ User @{username} (ID: {user_id}) added! Note: {note}")


@dp.message(Command("list_users"))
async def cmd_list_users(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return await message.answer("🚫 This command is only available to administrators.")

    users = load_users()
    if not users:
        return await message.answer("📂 The user list is empty.")

    user_list = "\n".join([f"@{username} -> {user_data['user_id']} | Note: {user_data.get('note', 'No note')}"
                           for username, user_data in users.items()])
    await message.answer(f"📋 User list:\n{user_list}")


@dp.message(Command("set_note"))
async def cmd_set_note(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return await message.answer("🚫 This command is only available to administrators.")

    args = message.text.split(maxsplit=2)
    if len(args) < 3:
        return await message.answer("❌ Usage: /set_note <username> <note>")

    username, note = args[1].lower(), args[2]

    users = load_users()
    if username not in users:
        return await message.answer(f"❌ User @{username} not found!")

    users[username]['note'] = note
    save_users(users)

    await message.answer(f"✅ Note for @{username} updated successfully!")


@dp.message(Command("check"))
async def cmd_check(message: types.Message, state: FSMContext):
    if message.from_user.id not in ADMIN_IDS:
        return await message.answer("🚫 This command is only available to administrators.")

    await state.set_state(CheckForm.username)
    await message.answer(
        "👤 Enter the recipient's username *without @*, note, or user ID:",
        parse_mode="Markdown",
        reply_markup=get_cancel_keyboard(),
    )


@dp.message(CheckForm.username)
async def process_username(message: types.Message, state: FSMContext):
    if message.text == "❌ Cancel":
        await state.clear()
        return await message.answer("❌ Receipt creation canceled.", reply_markup=types.ReplyKeyboardRemove())

    users = load_users()
    input_data = message.text.strip().lower()

    # Search by username
    if input_data in users:
        username = input_data
        await message.answer(f"✅ User found by username: @{username}")
    else:
        # Search by user_id
        user_by_id = next((username for username, data in users.items() if str(data["user_id"]) == input_data), None)
        if user_by_id:
            username = user_by_id
            await message.answer(f"✅ User found by user_id: @{username}")
        else:
            # Search by note
            user_by_note = next((username for username, data in users.items() if input_data in data.get("note", "").lower()), None)
            if user_by_note:
                username = user_by_note
                await message.answer(f"✅ User found by note: @{username}")
            else:
                return await message.answer("❌ User not found! Check the entered data.")

    await state.update_data(username=username)
    await state.set_state(CheckForm.date)
    await message.answer(
        "📅 Choose the receipt date:",
        reply_markup=get_date_keyboard(),
    )


@dp.message(CheckForm.date)
async def process_date(message: types.Message, state: FSMContext):
    if message.text == "❌ Cancel":
        await state.clear()
        return await message.answer("❌ Receipt creation canceled.", reply_markup=types.ReplyKeyboardRemove())

    if message.text == "📅 Today":
        date = datetime.now().strftime("%d.%m.%Y")
    else:
        try:
            datetime.strptime(message.text, "%d.%m.%Y")
            date = message.text
        except ValueError:
            await message.answer("❌ Invalid format! Use DD.MM.YYYY")
            await state.set_state(CheckForm.date)  # Повторно запросить дату
            return

    await state.update_data(date=date)
    await state.set_state(CheckForm.cash)
    await message.answer(
        "💰 Enter cash:",
        reply_markup=get_cancel_keyboard(),
    )


@dp.message(CheckForm.cash)
async def process_cash(message: types.Message, state: FSMContext):
    if message.text == "❌ Cancel":
        await state.clear()
        return await message.answer("❌ Receipt creation canceled.", reply_markup=types.ReplyKeyboardRemove())

    if not message.text.isdigit():
        return await message.answer("❌ Cash must be a number!")

    await state.update_data(cash=message.text)
    await state.set_state(CheckForm.noncash)
    await message.answer(
        "💰 Enter Non cash:",
        reply_markup=get_cancel_keyboard(),
    )


@dp.message(CheckForm.noncash)
async def process_noncash(message: types.Message, state: FSMContext):
    if message.text == "❌ Cancel":
        await state.clear()
        return await message.answer("❌ Receipt creation canceled.", reply_markup=types.ReplyKeyboardRemove())

    if not message.text.isdigit():
        return await message.answer("❌ Cash must be a number!")

    await state.update_data(noncash=message.text)

    # Получаем данные о пользователе
    data = await state.get_data()
    username = data.get("username")
    users = load_users()
    user_note = users.get(username, {}).get("note", "")

    # Если есть заметка, предлагаем её использовать
    if user_note:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=f"✅ Use note: {user_note}", callback_data="use_note")],
            [InlineKeyboardButton(text="📝 Enter manually", callback_data="enter_manually")]
        ])
        await message.answer(
            f"📛 We found a note for this user: {user_note}\n"
            "Do you want to use it as the full name?",
            reply_markup=keyboard,
        )
    else:
        # Если заметки нет, переходим к вводу полного имени
        await state.set_state(CheckForm.fullname)
        await message.answer(
            "📛 Enter the recipient's full name:",
            reply_markup=get_cancel_keyboard(),
        )


# Обработка inline-кнопок
@dp.callback_query(lambda c: c.data in ["use_note", "enter_manually"])
async def handle_fullname_choice(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.data == "use_note":
        # Используем заметку как полное имя
        data = await state.get_data()
        username = data.get("username")
        users = load_users()
        user_note = users.get(username, {}).get("note", "")

        await state.update_data(fullname=user_note)
        await callback_query.message.edit_text(f"✅ Full name set to: {user_note}")

        # Переходим к следующему шагу (например, предпросмотру чека)
        await preview_check(callback_query.message, state)
    else:
        # Запрашиваем ввод полного имени вручную
        await callback_query.message.edit_text("📛 Enter the recipient's full name:")
        await state.set_state(CheckForm.fullname)


@dp.message(CheckForm.fullname)
async def process_fullname(message: types.Message, state: FSMContext):
    if message.text == "❌ Cancel":
        await state.clear()
        return await message.answer("❌ Receipt creation canceled.", reply_markup=types.ReplyKeyboardRemove())

    await state.update_data(fullname=message.text)
    data = await state.get_data()

    # Переходим к предпросмотру чека
    await preview_check(message, state)


async def preview_check(message: types.Message, state: FSMContext):
    data = await state.get_data()

    # Получаем заметку из данных пользователя
    users = load_users()
    user_note = users.get(data["username"], {}).get("note", "")

    check_preview = (
        f"📋 <b>Receipt Preview</b>\n"
        f"👤: @{data.get('username', 'Unknown')}\n"
        f"📅 Date: {data.get('date', 'Unknown')}\n"
        f"💰 Cash: {data.get('cash', '0')}\n"
        f"💰 Non cash: {data.get('noncash', '0')}\n"
        f"📛 Full Name: {data.get('fullname', 'Unknown')}\n"
        f"📝 Note: {user_note if user_note else 'No note'}"  # Добавляем заметку в предпросмотр
    )

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="✅ Send", callback_data="send_check"),
         InlineKeyboardButton(text="🔄 Redo", callback_data="redo_check")]
    ])
    await message.answer(check_preview, reply_markup=keyboard, parse_mode="HTML")

@dp.callback_query(lambda c: c.data == "redo_check")
async def redo_check(callback_query: types.CallbackQuery, state: FSMContext):
    try:
        # Clear the state to restart the process
        await state.clear()

        # Edit the message to remove the inline keyboard
        await callback_query.message.edit_text(
            "❌ Check creation canceled. Starting over!",
            reply_markup=None  # Remove the inline keyboard
        )

        # Send a new message with instructions
        await callback_query.message.answer(
            "👤 Enter the username *without @*, a note, or the user ID of the recipient:",
            parse_mode="Markdown",
            reply_markup=get_cancel_keyboard()  # Use a different keyboard
        )
    except Exception as e:
        logging.error(f"Error in redo_check: {e}")

@dp.callback_query(lambda c: c.data == "send_check")
async def send_check(callback_query: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    user_id = get_user_id(data["username"])

    if not user_id:
        await callback_query.message.edit_text(f"❌ User @{data['username']} not found!")
        return

    # Генерация ID чека
    check_id = str(uuid.uuid4())
    data["check_id"] = check_id

    # Сохранение в Google Sheets с заметкой
    try:
        success = await gsheets.append_data(data, "Pending")
        if not success:
            raise Exception("Error adding to Google Sheets")
    except Exception as e:
        logger.error(f"Google Sheets write error: {str(e)}")
        await callback_query.message.edit_text("❌ Error saving receipt!")
        return

    # Сохранение чека во временное хранилище
    async with temp_storage_lock:
        temp_storage[check_id] = data

    # Отправка пользователю
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="✔ Confirm",
            callback_data=f"confirm_check:{user_id}:{check_id}"
        )],
        [InlineKeyboardButton(
            text="✖ Reject",
            callback_data=f"reject_check:{user_id}:{check_id}"
        )]
    ])

    try:
        await bot.send_message(
            user_id,
            f"🔔 A receipt has been sent to you for confirmation:\n"
            f"📅 Date: {data['date']}\n"
            f"💰 Cash: {data['cash']}\n"
            f"💰 Non cash: {data['noncash']}\n"
            f"📛 Full Name: {data['fullname']}\n"
            f"Status: Pending ⏳",
            reply_markup=keyboard
        )
        await callback_query.message.edit_text("✅ Receipt successfully sent to the user!")
        await state.clear()
    except exceptions.TelegramBadRequest as e:
        logger.error(f"Send error: {e}")
        await callback_query.message.edit_text("❌ User not found or chat unavailable!")
    except Exception as e:
        logger.error(f"Receipt send error: {str(e)}")
        await callback_query.message.edit_text("❌ Error sending receipt!")


async def update_status_in_sheets(check_data: dict, new_status: str):
    try:
        client = await gsheets.client_manager.authorize()
        spreadsheet = await client.open_by_url(SHEET_URL)
        worksheet = await spreadsheet.worksheet(WORKSHEET_NAME)

        # Получаем все строки и заголовки
        rows = await worksheet.get_all_values()
        headers = rows[0]  # Первая строка — заголовки

        # Находим индекс столбца "Status" (или другого, где хранится статус)
        status_column_index = headers.index("Status") if "Status" in headers else -1

        if status_column_index == -1:
            logger.error("Column 'Status' not found in the sheet!")
            return False

        # Ищем строку с нужным check_id
        for i, row in enumerate(rows[1:], start=2):  # Пропускаем заголовки
            if row and row[0] == check_data["check_id"]:
                # Обновляем статус в нужном столбце
                await worksheet.update_cell(i, status_column_index + 1, new_status)
                return True

        logger.error(f"Row with check_id {check_data['check_id']} not found!")
        return False
    except Exception as e:
        logger.error(f"Google Sheets status update error: {str(e)}")
        return False


@dp.callback_query(lambda c: c.data.startswith("confirm_check:"))
async def confirm_check(callback_query: types.CallbackQuery):
    parts = callback_query.data.split(":")
    user_id = int(parts[1])
    check_id = parts[2]

    async with temp_storage_lock:
        check_data = temp_storage.get(check_id)

    if not check_data:
        return await callback_query.message.answer("❌ Receipt expired or not found!")

    success = await update_status_in_sheets(check_data, "Accepted ✅")

    for admin_id in ADMIN_IDS:
        try:
            await bot.send_message(
                admin_id,
                f"📊 Receipt from @{check_data['username']} ({check_data['date']})\n"
                f"Amounts: {check_data['cash']}/{check_data['noncash']}\n"
                f"Full Name: {check_data['fullname']}\n"
                f"Status: {'Accepted ✅' if success else 'Error ❌'}"
            )
        except Exception as e:
            logger.error(f"Admin send error: {str(e)}")

    await callback_query.message.edit_reply_markup(reply_markup=None)

    if success:
        await callback_query.message.answer("✅ Receipt confirmed!")  # Send new message
    else:
        await callback_query.message.answer("❌ Error updating status!")


@dp.callback_query(lambda c: c.data.startswith("reject_check:"))
async def reject_check(callback_query: types.CallbackQuery):
    parts = callback_query.data.split(":")
    user_id = int(parts[1])
    check_id = parts[2]

    async with temp_storage_lock:
        check_data = temp_storage.get(check_id)

    if not check_data:
        return await callback_query.message.answer("❌ Receipt expired or not found!")

    success = await update_status_in_sheets(check_data, "Rejected ❌")

    for admin_id in ADMIN_IDS:
        try:
            await bot.send_message(
                admin_id,
                f"📊 Receipt from @{check_data['username']} ({check_data['date']})\n"
                f"Amounts: {check_data['cash']}/{check_data['noncash']}\n"
                f"Full Name: {check_data['fullname']}\n"
                f"Status: {'Rejected ❌' if success else 'Error ❌'}"
            )
        except Exception as e:
            logger.error(f"Admin send error: {str(e)}")

    await callback_query.message.edit_reply_markup(reply_markup=None)

    if success:
        await callback_query.message.answer("❌ Receipt rejected!")  # Send new message
    else:
        await callback_query.message.answer("❌ Error updating status!")


async def main():
    logger.info("Starting bot...")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
