import os
import logging
import json
import asyncio
import uuid
from datetime import datetime
from typing import Dict
from aiogram import Bot, Dispatcher, types, exceptions
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardMarkup,
)
from dotenv import load_dotenv
from gspread_asyncio import AsyncioGspreadClientManager
from oauth2client.service_account import ServiceAccountCredentials

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
API_TOKEN = os.getenv("BOT_API_TOKEN")
ADMIN_IDS = list(map(int, os.getenv("ADMIN_IDS", "").split(","))) if os.getenv("ADMIN_IDS") else []

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
DATA_FILE = "users.json"
SHEET_URL = os.getenv("SHEET_URL")
WORKSHEET_NAME = os.getenv("WORKSHEET_NAME")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞
temp_storage: Dict[str, dict] = {}
temp_storage_lock = asyncio.Lock()


class CheckForm(StatesGroup):
    username = State()
    date = State()
    amount1 = State()
    amount2 = State()
    fullname = State()


class GoogleSheetsManager:
    def __init__(self):
        self.client_manager = AsyncioGspreadClientManager(
            lambda: ServiceAccountCredentials.from_json_keyfile_name(
                "credentials.json",
                [
                    "https://www.googleapis.com/auth/spreadsheets",
                    "https://www.googleapis.com/auth/drive",
                ],
            )
        )

    async def append_data(self, data: dict, status: str) -> bool:
        try:
            client = await self.client_manager.authorize()
            spreadsheet = await client.open_by_url(SHEET_URL)
            worksheet = await spreadsheet.worksheet(WORKSHEET_NAME)
            row = [
                data["check_id"],
                data["username"],
                data["date"],
                data["amount1"],
                data["amount2"],
                data["fullname"],
                status
            ]
            await worksheet.append_row(row)
            return True
        except Exception as e:
            logger.error(f"Google Sheets Error: {str(e)}", exc_info=True)
            return False


gsheets = GoogleSheetsManager()


def load_users() -> dict:
    try:
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return {}



def save_users(users: dict):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(users, f, indent=4, ensure_ascii=False)


def get_user_id(username: str) -> int | None:
    users = load_users()
    user_data = users.get(username.lower())
    return user_data["user_id"] if user_data else None


def get_cancel_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]],
        resize_keyboard=True,
    )


def get_date_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìÖ –°–µ–≥–æ–¥–Ω—è"), KeyboardButton(text="üìù –í–≤–µ—Å—Ç–∏ –¥–∞—Ç—É")],
            [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
        ],
        resize_keyboard=True,
    )


@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    users = load_users()
    username = message.from_user.username
    user_id = message.from_user.id

    if username:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ –¥–∞–Ω–Ω—ã–µ
        if username.lower() in users:
            users[username.lower()]["user_id"] = user_id
        else:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ —Å –ø—É—Å—Ç–æ–π –∑–∞–º–µ—Ç–∫–æ–π
            users[username.lower()] = {"user_id": user_id, "note": ""}
        save_users(users)

    if user_id not in ADMIN_IDS:
        for admin_id in ADMIN_IDS:
            try:
                await bot.send_message(
                    admin_id,
                    f"üë§ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username or '–ù–µ —É–∫–∞–∑–∞–Ω'} (ID: {user_id})"
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞: {e}")

    await message.answer(
        "üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–µ–∫–∞–º–∏!\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /check —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —á–µ–∫.",
        reply_markup=get_cancel_keyboard(),
    )


@dp.message(Command("add_user"))
async def cmd_add_user(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return await message.answer("üö´ –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")

    args = message.text.split(maxsplit=3)
    if len(args) < 3:
        return await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add_user <username> <user_id> [–∑–∞–º–µ—Ç–∫–∞]")

    username, user_id = args[1].lower(), args[2]
    note = args[3] if len(args) > 3 else ""

    if not user_id.isdigit():
        return await message.answer("‚ùå user_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")

    users = load_users()
    users[username] = {"user_id": int(user_id), "note": note}
    save_users(users)

    await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} (ID: {user_id}) –¥–æ–±–∞–≤–ª–µ–Ω! –ó–∞–º–µ—Ç–∫–∞: {note}")



@dp.message(Command("list_users"))
async def cmd_list_users(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return await message.answer("üö´ –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")

    users = load_users()
    if not users:
        return await message.answer("üìÇ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç.")

    user_list = "\n".join([f"@{username} -> {user_data['user_id']} | –ó–∞–º–µ—Ç–∫–∞: {user_data.get('note', '–ù–µ—Ç –∑–∞–º–µ—Ç–∫–∏')}"
                           for username, user_data in users.items()])
    await message.answer(f"üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n{user_list}")

@dp.message(Command("set_note"))
async def cmd_set_note(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return await message.answer("üö´ –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")

    args = message.text.split(maxsplit=2)
    if len(args) < 3:
        return await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /set_note <username> <–∑–∞–º–µ—Ç–∫–∞>")

    username, note = args[1].lower(), args[2]

    users = load_users()
    if username not in users:
        return await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω!")

    users[username]['note'] = note
    save_users(users)

    await message.answer(f"‚úÖ –ó–∞–º–µ—Ç–∫–∞ –¥–ª—è @{username} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")

@dp.message(Command("check"))
async def cmd_check(message: types.Message, state: FSMContext):
    if message.from_user.id not in ADMIN_IDS:
        return await message.answer("üö´ –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")

    await state.set_state(CheckForm.username)
    await message.answer(
        "üë§ –í–≤–µ–¥–∏—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º *–±–µ–∑ @*, –∑–∞–º–µ—Ç–∫—É –∏–ª–∏ —é–∑–µ—Ä id –ø–æ–ª—É—á–∞—Ç–µ–ª—è:",
        parse_mode="Markdown",
        reply_markup=get_cancel_keyboard(),
    )

@dp.message(CheckForm.username)
async def process_username(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        return await message.answer("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —á–µ–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=types.ReplyKeyboardRemove())

    users = load_users()
    input_data = message.text.strip().lower()

    # –ü–æ–∏—Å–∫ –ø–æ —é–∑–µ—Ä–Ω–µ–π–º—É
    if input_data in users:
        username = input_data
        await message.answer(f"‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ —é–∑–µ—Ä–Ω–µ–π–º—É: @{username}")
    else:
        # –ü–æ–∏—Å–∫ –ø–æ user_id
        user_by_id = next((username for username, data in users.items() if str(data["user_id"]) == input_data), None)
        if user_by_id:
            username = user_by_id
            await message.answer(f"‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ user_id: @{username}")
        else:
            # –ü–æ–∏—Å–∫ –ø–æ –∑–∞–º–µ—Ç–∫–µ
            user_by_note = next((username for username, data in users.items() if input_data in data.get("note", "").lower()), None)
            if user_by_note:
                username = user_by_note
                await message.answer(f"‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ –∑–∞–º–µ—Ç–∫–µ: @{username}")
            else:
                return await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")

    await state.update_data(username=username)
    await state.set_state(CheckForm.date)
    await message.answer(
        "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É —á–µ–∫–∞:",
        reply_markup=get_date_keyboard(),
    )


@dp.message(CheckForm.date)
async def process_date(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        return await message.answer("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —á–µ–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=types.ReplyKeyboardRemove())

    if message.text == "üìÖ –°–µ–≥–æ–¥–Ω—è":
        date = datetime.now().strftime("%d.%m.%Y")
    else:
        try:
            datetime.strptime(message.text, "%d.%m.%Y")
            date = message.text
        except ValueError:
            return await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")

    await state.update_data(date=date)
    await state.set_state(CheckForm.amount1)
    await message.answer(
        "üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É 1:",
        reply_markup=get_cancel_keyboard(),
    )


@dp.message(CheckForm.amount1)
async def process_amount1(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        return await message.answer("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —á–µ–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=types.ReplyKeyboardRemove())

    if not message.text.isdigit():
        return await message.answer("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º!")

    await state.update_data(amount1=message.text)
    await state.set_state(CheckForm.amount2)
    await message.answer(
        "üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É 2:",
        reply_markup=get_cancel_keyboard(),
    )


@dp.message(CheckForm.amount2)
async def process_amount2(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        return await message.answer("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —á–µ–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=types.ReplyKeyboardRemove())

    if not message.text.isdigit():
        return await message.answer("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º!")

    await state.update_data(amount2=message.text)
    await state.set_state(CheckForm.fullname)
    await message.answer(
        "üìõ –í–≤–µ–¥–∏—Ç–µ –§–ò–û –ø–æ–ª—É—á–∞—Ç–µ–ª—è:",
        reply_markup=get_cancel_keyboard(),
    )


@dp.message(CheckForm.fullname)
async def process_fullname(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        return await message.answer("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —á–µ–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=types.ReplyKeyboardRemove())

    await state.update_data(fullname=message.text)
    data = await state.get_data()

    check_preview = (
        "üìã *–ü—Ä–µ–≤—å—é —á–µ–∫–∞*\n"
        f"üë§: @{data['username']}\n"
        f"üìÖ –î–∞—Ç–∞: {data['date']}\n"
        f"üí∞ –°—É–º–º–∞ 1: {data['amount1']}\n"
        f"üí∞ –°—É–º–º–∞ 2: {data['amount2']}\n"
        f"üìõ –§–ò–û: {data['fullname']}"
    )

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="send_check"),
         InlineKeyboardButton(text="üîÑ –ü–µ—Ä–µ–¥–µ–ª–∞—Ç—å", callback_data="redo_check")]
    ])
    await message.answer(check_preview, reply_markup=keyboard, parse_mode="Markdown")


@dp.callback_query(lambda c: c.data == "send_check")
async def send_check(callback_query: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    user_id = get_user_id(data["username"])

    if not user_id:
        await callback_query.message.edit_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{data['username']} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID —á–µ–∫–∞
    check_id = str(uuid.uuid4())
    data["check_id"] = check_id

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Google Sheets —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º "–û–∂–∏–¥–∞–Ω–∏–µ"
    try:
        success = await gsheets.append_data(data, "–û–∂–∏–¥–∞–Ω–∏–µ")
        if not success:
            raise Exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ Google Sheets")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ Google Sheets: {str(e)}")
        await callback_query.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —á–µ–∫–∞!")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ–∫ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    async with temp_storage_lock:
        temp_storage[check_id] = data

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="‚úî –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
            callback_data=f"confirm_check:{user_id}:{check_id}"
        )],
        [InlineKeyboardButton(
            text="‚úñ –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
            callback_data=f"reject_check:{user_id}:{check_id}"
        )]
    ])

    try:
        await bot.send_message(
            user_id,
            f"üîî –í–∞–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ–∫ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:\n"
            f"üìÖ –î–∞—Ç–∞: {data['date']}\n"
            f"üí∞ –°—É–º–º–∞ 1: {data['amount1']}\n"
            f"üí∞ –°—É–º–º–∞ 2: {data['amount2']}\n"
            f"üìõ –§–ò–û: {data['fullname']}\n"
            f"–°—Ç–∞—Ç—É—Å: –û–∂–∏–¥–∞–Ω–∏–µ ‚è≥",
            reply_markup=keyboard
        )
        await callback_query.message.edit_text("‚úÖ –ß–µ–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!")
        await state.clear()
    except exceptions.TelegramBadRequest as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
        await callback_query.message.edit_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —á–∞—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ–∫–∞: {str(e)}")
        await callback_query.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —á–µ–∫–∞!")

async def update_status_in_sheets(check_data: dict, new_status: str):
    try:
        client = await gsheets.client_manager.authorize()
        spreadsheet = await client.open_by_url(SHEET_URL)
        worksheet = await spreadsheet.worksheet(WORKSHEET_NAME)
        rows = await worksheet.get_all_values()

        for i, row in enumerate(rows, start=1):
            if row and row[0] == check_data["check_id"]:
                await worksheet.update_cell(i, len(row), new_status)
                return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≤ Google Sheets: {str(e)}")
    return False


@dp.callback_query(lambda c: c.data.startswith("confirm_check:"))
async def confirm_check(callback_query: types.CallbackQuery):
    parts = callback_query.data.split(":")
    user_id = int(parts[1])
    check_id = parts[2]

    async with temp_storage_lock:
        check_data = temp_storage.get(check_id)

    if not check_data:
        return await callback_query.message.answer("‚ùå –ß–µ–∫ —É—Å—Ç–∞—Ä–µ–ª –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω!")

    success = await update_status_in_sheets(check_data, "–ü—Ä–∏–Ω—è—Ç ‚úÖ")

    for admin_id in ADMIN_IDS:
        try:
            await bot.send_message(
                admin_id,
                f"üìä –ß–µ–∫ –æ—Ç @{check_data['username']} ({check_data['date']})\n"
                f"–°—É–º–º—ã: {check_data['amount1']}/{check_data['amount2']}\n"
                f"–§–ò–û: {check_data['fullname']}\n"
                f"–°—Ç–∞—Ç—É—Å: {'–ü—Ä–∏–Ω—è—Ç ‚úÖ' if success else '–û—à–∏–±–∫–∞ ‚ùå'}"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É: {str(e)}")

    await callback_query.message.edit_reply_markup(reply_markup=None)

    if success:
        await callback_query.message.answer("‚úÖ –ß–µ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!")  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    else:
        await callback_query.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞!")


@dp.callback_query(lambda c: c.data.startswith("reject_check:"))
async def reject_check(callback_query: types.CallbackQuery):
    parts = callback_query.data.split(":")
    user_id = int(parts[1])
    check_id = parts[2]

    async with temp_storage_lock:
        check_data = temp_storage.get(check_id)

    if not check_data:
        return await callback_query.message.answer("‚ùå –ß–µ–∫ —É—Å—Ç–∞—Ä–µ–ª –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω!")

    success = await update_status_in_sheets(check_data, "–û—Ç–∫–ª–æ–Ω—ë–Ω ‚ùå")

    for admin_id in ADMIN_IDS:
        try:
            await bot.send_message(
                admin_id,
                f"üìä –ß–µ–∫ –æ—Ç @{check_data['username']} ({check_data['date']})\n"
                f"–°—É–º–º—ã: {check_data['amount1']}/{check_data['amount2']}\n"
                f"–§–ò–û: {check_data['fullname']}\n"
                f"–°—Ç–∞—Ç—É—Å: {'–û—Ç–∫–ª–æ–Ω—ë–Ω ‚ùå' if success else '–û—à–∏–±–∫–∞ ‚ùå'}"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É: {str(e)}")

    await callback_query.message.edit_reply_markup(reply_markup=None)

    if success:
        await callback_query.message.answer("‚ùå –ß–µ–∫ –æ—Ç–∫–ª–æ–Ω—ë–Ω!")  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    else:
        await callback_query.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞!")


async def main():
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())